module AES (aesTests) where

import Data.Array
import Data.Bits
import Data.Word
import Test.HUnit

import qualified Data.ByteString as B

import Base64
import XOR

aesTests :: Test
aesTests = "AES Key Schedule" ~: map (uncurry tc)
    [ (   "00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
      , [ "00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
        , "62 63 63 63 62 63 63 63 62 63 63 63 62 63 63 63"
        , "9b 98 98 c9 f9 fb fb aa 9b 98 98 c9 f9 fb fb aa"
        , "90 97 34 50 69 6c cf fa f2 f4 57 33 0b 0f ac 99"
        , "ee 06 da 7b 87 6a 15 81 75 9e 42 b2 7e 91 ee 2b"
        , "7f 2e 2b 88 f8 44 3e 09 8d da 7c bb f3 4b 92 90"
        , "ec 61 4b 85 14 25 75 8c 99 ff 09 37 6a b4 9b a7"
        , "21 75 17 87 35 50 62 0b ac af 6b 3c c6 1b f0 9b"
        , "0e f9 03 33 3b a9 61 38 97 06 0a 04 51 1d fa 9f"
        , "b1 d4 d8 e2 8a 7d b9 da 1d 7b b3 de 4c 66 49 41"
        , "b4 ef 5b cb 3e 92 e2 11 23 e9 51 cf 6f 8f 18 8e"
        ]
      )
    , (   "ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff"
      , [ "ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff"
        , "e8 e9 e9 e9 17 16 16 16 e8 e9 e9 e9 17 16 16 16"
        , "ad ae ae 19 ba b8 b8 0f 52 51 51 e6 45 47 47 f0"
        , "09 0e 22 77 b3 b6 9a 78 e1 e7 cb 9e a4 a0 8c 6e"
        , "e1 6a bd 3e 52 dc 27 46 b3 3b ec d8 17 9b 60 b6"
        , "e5 ba f3 ce b7 66 d4 88 04 5d 38 50 13 c6 58 e6"
        , "71 d0 7d b3 c6 b6 a9 3b c2 eb 91 6b d1 2d c9 8d"
        , "e9 0d 20 8d 2f bb 89 b6 ed 50 18 dd 3c 7d d1 50"
        , "96 33 73 66 b9 88 fa d0 54 d8 e2 0d 68 a5 33 5d"
        , "8b f0 3f 23 32 78 c5 f3 66 a0 27 fe 0e 05 14 a3"
        , "d6 0a 35 88 e4 72 f0 7b 82 d2 d7 85 8c d7 c3 26"
        ]
      )
    , (   "00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f"
      , [ "00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f"
        , "d6 aa 74 fd d2 af 72 fa da a6 78 f1 d6 ab 76 fe"
        , "b6 92 cf 0b 64 3d bd f1 be 9b c5 00 68 30 b3 fe"
        , "b6 ff 74 4e d2 c2 c9 bf 6c 59 0c bf 04 69 bf 41"
        , "47 f7 f7 bc 95 35 3e 03 f9 6c 32 bc fd 05 8d fd"
        , "3c aa a3 e8 a9 9f 9d eb 50 f3 af 57 ad f6 22 aa"
        , "5e 39 0f 7d f7 a6 92 96 a7 55 3d c1 0a a3 1f 6b"
        , "14 f9 70 1a e3 5f e2 8c 44 0a df 4d 4e a9 c0 26"
        , "47 43 87 35 a4 1c 65 b9 e0 16 ba f4 ae bf 7a d2"
        , "54 99 32 d1 f0 85 57 68 10 93 ed 9c be 2c 97 4e"
        , "13 11 1d 7f e3 94 4a 17 f3 07 a7 8b 4d 2b 30 c5"
        ]
      )
    , (   "69 20 e2 99 a5 20 2a 6d 65 6e 63 68 69 74 6f 2a"
      , [ "69 20 e2 99 a5 20 2a 6d 65 6e 63 68 69 74 6f 2a"
        , "fa 88 07 60 5f a8 2d 0d 3a c6 4e 65 53 b2 21 4f"
        , "cf 75 83 8d 90 dd ae 80 aa 1b e0 e5 f9 a9 c1 aa"
        , "18 0d 2f 14 88 d0 81 94 22 cb 61 71 db 62 a0 db"
        , "ba ed 96 ad 32 3d 17 39 10 f6 76 48 cb 94 d6 93"
        , "88 1b 4a b2 ba 26 5d 8b aa d0 2b c3 61 44 fd 50"
        , "b3 4f 19 5d 09 69 44 d6 a3 b9 6f 15 c2 fd 92 45"
        , "a7 00 77 78 ae 69 33 ae 0d d0 5c bb cf 2d ce fe"
        , "ff 8b cc f2 51 e2 ff 5c 5c 32 a3 e7 93 1f 6d 19"
        , "24 b7 18 2e 75 55 e7 72 29 67 44 95 ba 78 29 8c"
        , "ae 12 7c da db 47 9b a8 f2 20 df 3d 48 58 f6 b1"
        ]
      )
    ]
    where
        tc input spec =
            unHexLines spec ~=? keySchedule (unHex input)
        unHex = decodeHex . concat . words
        unHexLines = map unHex

keySchedule :: B.ByteString -> [B.ByteString]
keySchedule k =
    map snd $ take 11 $ iterate go (1, k)
        where
            go (n, b) = (n+1, keyExpand n b)

keyExpand :: Word8 -> B.ByteString -> B.ByteString
keyExpand n k =
    keyJoin ka' kb' kc' kd'
        where
            (ka, kb, kc, kd) = keySplit k
            ka' = xorBuffer (scheduleCore n kd) ka
            kb' = xorBuffer kb ka'
            kc' = xorBuffer kc kb'
            kd' = xorBuffer kd kc'

rcon :: Array Word8 Word8
rcon = listArray (0, 255)
    [ 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a
    , 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39
    , 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a
    , 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8
    , 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef
    , 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc
    , 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b
    , 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3
    , 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94
    , 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20
    , 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35
    , 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f
    , 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04
    , 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63
    , 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd
    , 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
    ]

sbox :: Array Word8 Word8
sbox = listArray (0, 255)
    [ 0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76
    , 0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0
    , 0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15
    , 0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75
    , 0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84
    , 0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF
    , 0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8
    , 0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2
    , 0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73
    , 0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB
    , 0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79
    , 0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08
    , 0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A
    , 0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E
    , 0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF
    , 0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
    ]

scheduleCore :: Word8 -> B.ByteString -> B.ByteString
scheduleCore i k =
    B.pack [ka', kb', kc', kd']
        where
            ka' = sbox ! kb `xor` rcon ! i
            kb' = sbox ! kc
            kc' = sbox ! kd
            kd' = sbox ! ka
            [ka, kb, kc, kd] = B.unpack k

keyJoin :: B.ByteString -> B.ByteString -> B.ByteString -> B.ByteString -> B.ByteString
keyJoin a b c d =
    B.concat [a, b, c, d]

keySplit :: B.ByteString -> (B.ByteString, B.ByteString, B.ByteString, B.ByteString)
keySplit b =
    (chunk 0, chunk 1, chunk 2, chunk 3)
        where
            chunk n = B.take 4 $ B.drop (4*n) b
